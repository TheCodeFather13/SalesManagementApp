@page "/EmployeeManagement"
@using SalesManagementApp.Entities
@using SalesManagementApp.Models
@using SalesManagementApp.Services.Contracts
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations

@inject IEmployeeManagementService EmployeeManagementService
   
<h3 class="mb-4">Employee Administration</h3>

<div style="max-width:1100px">
    <SfGrid @ref="SfEmployeeGrid" AllowPdfExport="true" AllowExcelExport="true" AllowSorting="true" DataSource="employeeData" Toolbar="@toolbar">
        <GridEditSettings AllowAdding = "true" AllowEditing ="true" AllowDeleting = "true"></GridEditSettings>
          <GridEvents OnToolbarClick="ToolbarBtnClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="EmployeeModel"></GridEvents>
       
        <GridColumns>

              <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(EmployeeModel.Id)" Width="50px"></GridColumn>
            
              <GridColumn HeaderText="Profile" Width="90px">
                  <Template>
                    @{
                        var employee = (context as EmployeeModel);
                                                    <div class="profile-image-container">
                                                        <img src="@(employee?.ImagePath)"/>
                                                    </div>
                    }
                  </Template>
              </GridColumn>

              <GridColumn HeaderText="First Name" Field="@nameof(EmployeeModel.FirstName)" Width="90px"></GridColumn>           
              <GridColumn HeaderText="Last Name" Field="@nameof(EmployeeModel.LastName)" Width="90px"></GridColumn>
           
            <GridForeignColumn HeaderText="Designation" TValue="EmployeeJobTitle" 
                                        Field="@nameof(EmployeeModel.EmployeeJobTitleId)"
                                        ForeignDataSource="employeeJobTitleData"
                                        ForeignKeyValue="Name" Width="100px">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList @bind-value ="@((context as EmployeeModel).EmployeeJobTitleId)" 
                                            ID="EmployeeJobTitleId"
                                            DataSource="employeeJobTitleData" TItem="EmployeeJobTitle"
                                            TValue="int">
                        <Syncfusion.Blazor.DropDowns.DropDownListFieldSettings Text="Name" Value="EmployeeJobTitleId">
                        </Syncfusion.Blazor.DropDowns.DropDownListFieldSettings>

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>
           
            <GridColumn Field="@nameof(EmployeeModel.Gender)" Width="100px">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="genderCollection" TItem ="string" TValue="string"
                        @bind-value="@((context as EmployeeModel).Gender)">

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeModel.Email)" Width="185px">

            </GridColumn>
            <GridColumn HeaderText="DOB" Field="@nameof(EmployeeModel.DateOfBirth)" Format="d" Width="90px"></GridColumn>
            
            <GridForeignColumn HeaderText="Reports To" TValue="ReportToModel" 
                                        Field="@nameof(EmployeeModel.ReportToEmpId)"
                                        ForeignDataSource="reportToEmployeeData"
                                        ForeignKeyValue="ReportToName" Width="100px">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList @bind-value ="@((context as EmployeeModel).ReportToEmpId)" 
                                            ID="ReportToEmpId"
                                            DataSource="reportToEmployeeData" TItem="ReportToModel"
                                            TValue="Nullable<int>">
                        <Syncfusion.Blazor.DropDowns.DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
                        </Syncfusion.Blazor.DropDowns.DropDownListFieldSettings>

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>       
                </EditTemplate>
            </GridForeignColumn>
                
        </GridColumns>
        <Syncfusion.Blazor.Spinner.SfSpinner @bind-Visible="@VisibleProp" Label="Loading... Please wait"></Syncfusion.Blazor.Spinner.SfSpinner>
    </SfGrid>
</div>

<style>
    .profile-image-container{
        width: 80px;
        height: 80px;
    }

    .profile-image-container img{
        width: 100%;
        height: 100%;
        border-radius:50px;
    }
</style>


@code {

    private enum GenderVal
    {
        Male,
        Female,
        Other
    }

    private SfGrid<EmployeeModel>? SfEmployeeGrid { get; set; }

    private bool VisibleProp { get; set; } = false;

    private string[] genderCollection = Enum.GetNames(typeof(GenderVal));
    private List<EmployeeModel>? employeeData = null;
    private List<EmployeeJobTitle>? employeeJobTitleData;
    private List<ReportToModel>? reportToEmployeeData;
    private List<object> toolbar = new List<object> { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ExcelExport", "PdfExport",
                                                    new ItemModel(){Text="XML Export",TooltipText="Export Data to XML"
                                                                    ,PrefixIcon="e-click", Id="XmlExport"}};

    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true;
        employeeData = await EmployeeManagementService.GetEmployees();
        employeeJobTitleData = await EmployeeManagementService.GetJobTitles();
        reportToEmployeeData = await EmployeeManagementService.GetReportToEmployees();
        VisibleProp = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<EmployeeModel> args)
    {
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if(args.Action == "Add")
            {
                await EmployeeManagementService.AddEmployee(args.Data);
            }
            else if(args.Action == "Edit")
            {
                await EmployeeManagementService.UpdateEmployee(args.Data);
            }

        }
        else if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeManagementService.DeleteEmployee(args.Data.Id);
        }
    }

    public async void ActionCompleteHandler(ActionEventArgs<EmployeeModel> args)
    {
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if(args.Action == "Add")
            {
                employeeData = await EmployeeManagementService.GetEmployees();
                SfEmployeeGrid?.Refresh();
            }

        }
    }

    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if(args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid?.ExportToExcelAsync();
        }
        else if(args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid?.ExportToPdfAsync();
        }
        else if(args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }
}
