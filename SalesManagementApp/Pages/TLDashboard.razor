@page "/TLDashboard"
@attribute [Authorize(Roles ="TL")]
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Layouts
@using System.Timers
@inject NavigationManager NavigationManager
@inject ISalesOrderReportService SalesOrderReportService 
<style>
    .e-dashboardlayout {
        padding: 20px;
        z-index: 0;
    }
    .e-panel {
        cursor: auto !important;
    }
    .e-panel-header{
        border: none !important;
        background-color: @HeaderColor;
        height: 50px !important;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .title {
        font-size: 15px;
        font-weight: bold;
        color: @TitleColor;
    }
</style>
<div class="control-section">
    <SfDashboardLayout CellSpacing="@(new double[]{15 ,15 })" CellAspectRatio="0.8" Columns="8">
        <DashboardLayoutPanels>
            <DashboardLayoutEvents Created="LayoutCreated"></DashboardLayoutEvents>
            <DashboardLayoutPanel Column="0" Row="0" SizeX="5" SizeY="2">
                <HeaderTemplate>
                    <span class="title">Team Leader - Sales Gross / Team Member</span>
                </HeaderTemplate>
                <ContentTemplate>
                    @if (isLayoutRender)
                    {
                            <SfChart @ref="chart1" Title="Sales Gross / Team Member">
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                                </ChartPrimaryXAxis>

                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@GrossSalesPerTeamMemberData"
                XName="GroupedFieldKey" YName="Price" Type="ChartSeriesType.Bar"
                ></ChartSeries>
                                </ChartSeriesCollection>
                            </SfChart>
                    }
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="5" Row="0" SizeX="3" SizeY="2">
                <HeaderTemplate>
                    <span class="title">Team Leader - Quantity / Team Member</span>
                </HeaderTemplate>
                <ContentTemplate>
                    @if (isLayoutRender)
                    {
                   <SfAccumulationChart Title="Quantity / Product Category">
                        <AccumulationChartLegendSettings Visible="true" Position="LegendPosition.Top"></AccumulationChartLegendSettings>
                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@QtyPerTeamMemberData" XName="GroupedFieldKey" 
                YName="Quantity" Radius="70%" InnerRadius="40%" 
                Name="QtyPerProductCategory" Explode="true" ExplodeOffset="10%" ExplodeIndex="3">

                             <AccumulationDataLabelSettings Visible="true" Name="Label">
                                 <AccumulationChartDataLabelFont FontWeight="600" Color="White">
                                 </AccumulationChartDataLabelFont>
                             </AccumulationDataLabelSettings>

                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                    </SfAccumulationChart>
                    }
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="0" Row="4" SizeX="8" SizeY="3">
                <HeaderTemplate>
                    <span class="title">Sales Rep - Sales Quantity / Month</span>
                </HeaderTemplate>
                <ContentTemplate>
                    @if (isLayoutRender)
                    {
                            <SfChart @ref="chart2" Title="Qty / Month">
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@TeamQtyPerMonthData" XName="GroupedFieldKey" 
                                                             YName="Quantity" Type="ChartSeriesType.Line">

                                    </ChartSeries>
                                </ChartSeriesCollection>
                            </SfChart>
                    }
                </ContentTemplate>
            </DashboardLayoutPanel>
        </DashboardLayoutPanels>
    </SfDashboardLayout>
</div>
<style>
    ellipse[id*=_Trackball_1] {
        stroke-width: 1 !important;
        stroke: white !important;
    }
    .e-chart-focused:focus {
        outline: none !important;
    }
</style>
@code {

    List<GroupedFieldPriceModel> GrossSalesPerTeamMemberData { get; set; }
    List<GroupedFieldQtyModel> QtyPerTeamMemberData { get; set; }
    List<GroupedFieldQtyModel> TeamQtyPerMonthData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GrossSalesPerTeamMemberData = await SalesOrderReportService.GetGrossSalesPerTeamMemberData();
        QtyPerTeamMemberData = await SalesOrderReportService.GetQtyPerTeamMemberData();
        TeamQtyPerMonthData = await SalesOrderReportService.GetTeamQtyPerMonthData();
    }


    private bool isLayoutRender;
    string BorderColor = "#2485FA";
    string BorderColor2 = "#FEC200";
    string FillColor2;
    string FillColor;
    string Color;
    string HeaderColor;
    string TitleColor;
    string CurrentUri;
    string valueUrl = "url";
    private Theme theme;
    private static Timer timer;
    SfChart chart1;
    SfChart chart2;
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
    "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };
   
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        FillColor = String.Concat(valueUrl, "(#gradient-chart)");
        FillColor2 = String.Concat(valueUrl, "(#gradient-chart1)");
        if (CurrentUri.IndexOf("dark") > -1)
        {
            TitleColor = "#F3F2F1";
            if (CurrentUri.IndexOf("material") > -1)
            {
                Color = "#303030";
                HeaderColor = "#303030";
            }
            else if (CurrentUri.IndexOf("bootstrap5") > -1)
            {
                Color = "#212529";
                HeaderColor = "#212529";
            }
            else if (CurrentUri.IndexOf("bootstrap") > -1)
            {
                Color = "#1A1A1A";
                HeaderColor = "#1A1A1A";
            }
            else if (CurrentUri.IndexOf("tailwind") > -1)
            {
                Color = "#1F2937";
                HeaderColor = "#1F2937";
            }
            else
            {
                Color = "#222222";
                HeaderColor = "#222222";
            }
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Color = "#000000";
            HeaderColor = "#000000";
            TitleColor = "#F3F2F1";
        }
        else
        {
            Color = "#FFFFFF";
            HeaderColor = "#FAFAFA";
            TitleColor = "#737373";
        }      
    }

    public void LayoutCreated()
    {
        isLayoutRender = true;
        timer = new Timer(1000);
        timer.Elapsed += RefreshCharts;
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    private void RefreshCharts(Object source, ElapsedEventArgs e)
    {
        if (chart1 == null && chart2 == null)
            return;
        chart1.RefreshAsync(false);
      //  chart2.RefreshAsync(false);
        timer.Enabled = false;
        timer.AutoReset = false;
    }
}
<style>
    #control-container {
        padding: 0px !important;
    }
	#gradient-chart stop {
        stop-color: #2485FA;        
    }
    #gradient-chart1 stop{
        stop-color: #FEC200;
    } 
</style>
<svg style="height: 0">
    <defs>       
        <linearGradient id="gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
         <linearGradient id="gradient-chart1" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>
